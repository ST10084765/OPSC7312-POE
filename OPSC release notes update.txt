Comprehensive Report on the Smart Health Tracker App
--------------------------------------------------------------------------------------------------------------------------
1. Purpose of the App
The Smart Health Tracker App is designed to promote a healthier lifestyle by allowing users to monitor their physical activity through step tracking, manage their health-related settings, and facilitate user registration and authentication. The app aims to provide a user-friendly interface that enables users to:

Track Steps: Users can monitor their daily steps to encourage physical activity and set personal fitness goals.
Manage Health Settings: Users can adjust their settings for language preferences, notifications, and privacy, creating a personalized experience.
User Authentication: The app supports user registration, login, and password recovery, ensuring secure access to personal health data.
2. Design Considerations
In developing the Smart Health Tracker App, several design considerations were taken into account to ensure functionality, usability, and accessibility:

User Interface (UI): The app features a minimalistic and modern design that enhances user experience. The layout is intuitive, with easy navigation between the home, settings, and registration screens.

Bottom Navigation Bar: This allows users to quickly switch between different sections of the app.
Responsive Design: The app layout is designed to be responsive on various screen sizes to ensure a consistent experience.
User Experience (UX):

Feedback Mechanisms: Users receive instant feedback through Toast messages when actions are taken (e.g., starting or stopping step tracking).
Accessibility: The app includes text sizes and colors that enhance readability and ensure that it is accessible to all users.
Functionality:

Step Tracking: Utilizes the device's step counter sensor to provide real-time feedback on user activity.
Language Support: The app is designed to support multiple languages, including Zulu and Afrikaans, allowing it to reach a broader audience.
Security: User authentication features ensure that personal health data is protected. Passwords are securely managed, and users can reset their passwords if forgotten.

3. Utilization of GitHub
GitHub was utilized throughout the development process to facilitate collaboration, version control, and project management. Key aspects include:

Version Control: The app’s codebase is maintained in a GitHub repository, enabling the tracking of changes and easy rollback to previous versions if necessary. This is crucial for maintaining code integrity, especially in collaborative environments.

Branching and Merging: Features and bug fixes were developed in separate branches, allowing for concurrent development without disrupting the main codebase. This method ensures that new features can be tested independently before being merged into the main branch.

Issue Tracking: GitHub's issue tracking feature was employed to document bugs, feature requests, and improvements. This facilitates organized project management and helps prioritize development tasks.

Collaboration: Multiple developers contributed to the project by forking the repository and submitting pull requests, which were reviewed before merging. This collaborative approach encourages code quality and knowledge sharing among team members.

Documentation: README files were maintained to document the project’s purpose, installation instructions, and usage guidelines, making it easier for new contributors to understand the project.

4. Code References
Below are references for key components of the code developed for the Smart Health Tracker App:

MainActivity: Responsible for initializing the app and providing navigation between screens.

kotlin
Copy code
class MainActivity : AppCompatActivity() {
    // Initialization and navigation code here...
}
HomeActivity: Handles step tracking functionality using the device's sensors.

kotlin
Copy code
class HomeActivity : AppCompatActivity(), SensorEventListener {
    // Sensor management and UI updates here...
}
SettingsActivity: Manages user settings, including language preferences and notification settings.

kotlin
Copy code
class SettingsActivity : AppCompatActivity() {
    // Handle settings options and navigation...
}
RegisterActivity: Implements user registration functionality.

kotlin
Copy code
class RegisterActivity : AppCompatActivity() {
    // Registration logic and UI handling...
}
ForgotPasswordActivity: Manages password recovery for users who forget their credentials.

kotlin
Copy code
class ForgotPasswordActivity : AppCompatActivity() {
    // Password reset logic...
}

-----------------------------------------------------------------------------------------------------------------------------------
Release notes
------------------------------------------------------------------------------------------------------------------------------------

For this final update i have added firebase functionality with the app so that a login can be registered instead of onlu being able to login using a SSO

i have added a more responsive language support feature as it was shown on my original document.

----------------------------------------------------------------------------------------------------------------------------------------
References
Android Developers. (n.d.). Building a User Interface. [online] Available at: https://developer.android.com/guide/topics/ui [Accessed 30 Sept. 2024].

Android Developers. (n.d.). Sensor Overview. [online] Available at: https://developer.android.com/guide/topics/sensors/sensors_overview [Accessed 30 Sept. 2024].

GitHub. (n.d.). Introduction to GitHub. [online] Available at: https://docs.github.com/en/get-started/quickstart/hello-world [Accessed 30 Sept. 2024].

Firebase. (n.d.). Firebase Authentication. [online] Available at: https://firebase.google.com/docs/auth [Accessed 30 Sept. 2024].

Google Material Design. (n.d.). Bottom Navigation. [online] Available at: https://material.io/components/navigation/bottom-navigation [Accessed 30 Sept. 2024].

Firebase. (2024) Firebase Realtime Database. Available at: https://firebase.google.com/docs/database (Accessed: 4 November 2024).